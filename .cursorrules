# ShadowSight Dashboard Project Rules

## Project Structure
- All components should be placed in `src/components`
- All pages should be placed in `src/app`
- All hooks should be placed in `src/hooks`
- All types should be placed in `src/types`
- All utilities should be placed in `src/utils`
- All ML models should be placed in `src/ml`
- All constants should be placed in `src/constants`

## Naming Conventions
- Components: PascalCase (e.g., `UserActivityChart.tsx`)
- Hooks: camelCase with 'use' prefix (e.g., `useDataProcessing.ts`)
- Types: PascalCase with 'Type' suffix (e.g., `UserActivityType.ts`)
- Utils: camelCase (e.g., `csvParser.ts`)
- Constants: UPPER_SNAKE_CASE (e.g., `CHART_COLORS.ts`)

## Code Style
- Use TypeScript for all files
- Use functional components with hooks
- Implement proper error handling
- Add JSDoc comments for all functions and components
- Keep components small and focused
- Use proper type definitions
- Follow React best practices

## Performance Guidelines
- Implement proper memoization (useMemo, useCallback)
- Lazy load components when possible
- Optimize CSV processing for large files
- Use proper React key props
- Implement proper error boundaries

## Testing Requirements
- Write unit tests for utilities
- Write component tests for UI elements
- Test CSV processing functions
- Test ML model predictions
- Test data visualization components

## Security Guidelines
- No sensitive data in client-side storage
- Sanitize all user inputs
- Validate CSV data before processing
- Implement proper error handling
- No direct access to internal systems

## Documentation
- Maintain README.md with setup instructions
- Document all major components
- Document ML model architecture
- Document data processing pipeline
- Document visualization components

## Git Workflow
- Use feature branches
- Write meaningful commit messages
- Keep commits atomic and focused
- Review code before merging
- Maintain clean git history 